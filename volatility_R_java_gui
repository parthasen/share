package timeseranalysis;
import **
public class TSA extends javax.swing.JFrame {
int num=0;
double priceint[]=new double[num];
double priceintSPX[]=new double[1500];
double priceintOEX[]=new double[1500];
double priceintNDX[]=new double[1500];
double priceintNYA[]=new double[1500];
double priceintPTPX[]=new double[1500];
double priceintSML[]=new double[1500];
double priceintMID[]=new double[1500];
double priceintAMEX[]=new double[1500];
double priceintINDU[]=new double[1500];
String AMEXcsv= "d:/ParthaSen/Java R/AMEX.csv";
String SPXcsv= "d:/ParthaSen/Java R/SPX.csv";
String OEXcsv= "d:/ParthaSen/Java R/OEX.csv";
String NDXcsv= "d:/ParthaSen/Java R/NDX.csv";
String NYAcsv= "d:/ParthaSen/Java R/NYA.csv";
String PTPXcsv= "d:/ParthaSen/Java R/PTPX.csv";
String SMLcsv= "d:/ParthaSen/Java R/SML.csv";
String MIDcsv= "d:/ParthaSen/Java R/MID.csv";
String INDUcsv= "d:/ParthaSen/Java R/INDU.csv";

BufferedReader brAMEX = null;
BufferedReader brSPX = null;
BufferedReader brOEX =null;
BufferedReader brNYA =null;
BufferedReader brPTPX =null;
BufferedReader brSML = null;
BufferedReader brNDX = null;
BufferedReader brINDU = null;
BufferedReader brMID = null;
String line = "";
String []numbers = new String[30000];

public TSA() {initComponents();}
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        IndexList = new javax.swing.JList();
        textArea1 = new java.awt.TextArea();
        textArea2 = new java.awt.TextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jLabel5 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jRadioButton13 = new javax.swing.JRadioButton();
        jRadioButton14 = new javax.swing.JRadioButton();
        jRadioButton15 = new javax.swing.JRadioButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel10 = new javax.swing.JPanel();
        jRadioButton16 = new javax.swing.JRadioButton();
        jRadioButton17 = new javax.swing.JRadioButton();
        jRadioButton18 = new javax.swing.JRadioButton();
        jRadioButton19 = new javax.swing.JRadioButton();
        jRadioButton20 = new javax.swing.JRadioButton();
        jRadioButton21 = new javax.swing.JRadioButton();
        jRadioButton22 = new javax.swing.JRadioButton();
        jRadioButton23 = new javax.swing.JRadioButton();
        jRadioButton24 = new javax.swing.JRadioButton();
        jButton12 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jRadioButton42 = new javax.swing.JRadioButton();
        jRadioButton41 = new javax.swing.JRadioButton();
        jRadioButton40 = new javax.swing.JRadioButton();
        jRadioButton39 = new javax.swing.JRadioButton();
        jRadioButton38 = new javax.swing.JRadioButton();
        jRadioButton37 = new javax.swing.JRadioButton();
        jRadioButton36 = new javax.swing.JRadioButton();
        jRadioButton35 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton34 = new javax.swing.JRadioButton();
        jPanel16 = new javax.swing.JPanel();
        jRadioButton25 = new javax.swing.JRadioButton();
        jRadioButton26 = new javax.swing.JRadioButton();
        jRadioButton27 = new javax.swing.JRadioButton();
        jRadioButton28 = new javax.swing.JRadioButton();
        jRadioButton29 = new javax.swing.JRadioButton();
        jRadioButton30 = new javax.swing.JRadioButton();
        jRadioButton31 = new javax.swing.JRadioButton();
        jRadioButton32 = new javax.swing.JRadioButton();
        jRadioButton33 = new javax.swing.JRadioButton();
        jButton13 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jLabel3 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jPanel20 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jRadioButton43 = new javax.swing.JRadioButton();
        jRadioButton44 = new javax.swing.JRadioButton();
        jRadioButton45 = new javax.swing.JRadioButton();
        jRadioButton46 = new javax.swing.JRadioButton();
        jRadioButton47 = new javax.swing.JRadioButton();
        jRadioButton48 = new javax.swing.JRadioButton();
        jRadioButton49 = new javax.swing.JRadioButton();
        jRadioButton50 = new javax.swing.JRadioButton();
        jRadioButton51 = new javax.swing.JRadioButton();
        jButton14 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jRadioButton9 = new javax.swing.JRadioButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jRadioButton10 = new javax.swing.JRadioButton();
        jRadioButton11 = new javax.swing.JRadioButton();
        jRadioButton12 = new javax.swing.JRadioButton();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jLabel9 = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jButton15 = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane10 = new javax.swing.JScrollPane();
        jLabel10 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 204));
        jTabbedPane1.setForeground(new java.awt.Color(51, 0, 204));
        jTabbedPane1.setFont(new java.awt.Font("Arial Black", 0, 10)); // NOI18N
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(636, 525));

        jPanel1.setMaximumSize(new java.awt.Dimension(526, 300));
        jPanel1.setPreferredSize(new java.awt.Dimension(526, 300));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setForeground(new java.awt.Color(204, 204, 255));

        jButton1.setBackground(new java.awt.Color(0, 204, 102));
        jButton1.setFont(new java.awt.Font("Arial Narrow", 1, 8)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 153, 51));
        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Narrow", 1, 10)); // NOI18N
        jLabel1.setText(" Upload the csv data set of above indices");

        IndexList.setBackground(new java.awt.Color(255, 204, 204));
        IndexList.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        IndexList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "NDX \t:NASDAQ 100 index", "INDU\t:Dow Jones Industrial Average", "MID\t:Standard & Poor Midcap 400 Index", "AMEX\t:American Stock Exchange", "SPX\t:Standard & Poor 500 Index", "OEX\t:Standard & Poor 100 Index", "NYA\t:New York Exchange Composite Index", "PTPX\t:Philadelphia US Top 100 Sector Index", "SML\t:Standard & PoorSmallcap 600 Index" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(IndexList);

        textArea1.setBackground(new java.awt.Color(255, 255, 255));
        textArea1.setFont(new java.awt.Font("Book Antiqua", 1, 10)); // NOI18N
        textArea1.setMaximumSize(new java.awt.Dimension(100, 80));

        textArea2.setBackground(new java.awt.Color(255, 255, 255));
        textArea2.setFont(new java.awt.Font("Book Antiqua", 1, 10)); // NOI18N
        textArea2.setMaximumSize(new java.awt.Dimension(100, 80));

        jLabel4.setText("Price at Start");

        jLabel6.setText("Price at end");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(textArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(241, 241, 241))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                            .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(textArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel6)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(97, 97, 97))
        );

        jTextArea6.setColumns(20);
        jTextArea6.setRows(5);
        jTextArea6.setText("1.Price Chart will show the prices of the indices for last 1500 days. \n2.Stationary Test tab will test help to testthe stationarity \nof the time series us8ing the ADF test method\n3. Spread is measured using the beta value. And then in the CoIntegration\ntab the cointegration value is measured and highest is considered for \nGARCH analysis\n4. Prediction price tab is useful to get the next 3 day's predicted prices.\n5. Volatility tab is helpful to get the 1 day ahead volatility prediction and \ncomparison with the indices.\n6. Backtesting is done in scenarios where last 250 is considered as out of sample\nand previous to that 1250 days data are in sample. Here RSI at 0.9 at upper\nlevel and 0.1 at lower level is considered for BUY and SELL point.");
        jScrollPane11.setViewportView(jTextArea6);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 587, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Upload ", jPanel1);

        jPanel3.setBackground(new java.awt.Color(255, 255, 204));

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setFont(new java.awt.Font("Arial", 1, 8)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 255));
        jButton2.setText("AMEX");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(204, 204, 255));
        jButton3.setFont(new java.awt.Font("Arial", 1, 8)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 255));
        jButton3.setText("SPX");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(204, 204, 255));
        jButton4.setFont(new java.awt.Font("Arial", 1, 8)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 255));
        jButton4.setText("OEX");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(204, 204, 255));
        jButton5.setFont(new java.awt.Font("Arial", 1, 8)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 0, 255));
        jButton5.setText("NYA");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(204, 204, 255));
        jButton6.setFont(new java.awt.Font("Arial", 1, 8)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 255));
        jButton6.setText("PTPX");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(204, 204, 255));
        jButton7.setFont(new java.awt.Font("Arial", 0, 8)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 0, 255));
        jButton7.setText("SML");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(204, 204, 255));
        jButton8.setFont(new java.awt.Font("Arial", 1, 8)); // NOI18N
        jButton8.setForeground(new java.awt.Color(0, 0, 255));
        jButton8.setText("NDX");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton10.setBackground(new java.awt.Color(204, 204, 255));
        jButton10.setFont(new java.awt.Font("Arial", 1, 8)); // NOI18N
        jButton10.setForeground(new java.awt.Color(0, 0, 255));
        jButton10.setText("MID");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(204, 204, 255));
        jButton11.setFont(new java.awt.Font("Arial", 1, 8)); // NOI18N
        jButton11.setForeground(new java.awt.Color(0, 0, 255));
        jButton11.setText("INDU");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addGap(2, 2, 2)
                .addComponent(jButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton2)
                .addComponent(jButton3)
                .addComponent(jButton4)
                .addComponent(jButton5)
                .addComponent(jButton6)
                .addComponent(jButton7)
                .addComponent(jButton8)
                .addComponent(jButton10)
                .addComponent(jButton11))
        );

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(jLabel5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Price Chart", jPanel3);

        buttonGroup2.add(jRadioButton13);
        jRadioButton13.setText("Lag 1");

        buttonGroup2.add(jRadioButton14);
        jRadioButton14.setText("Lag 2");

        buttonGroup2.add(jRadioButton15);
        jRadioButton15.setText("Lag 3");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jRadioButton13)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton14)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton15)
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton13)
                    .addComponent(jRadioButton14)
                    .addComponent(jRadioButton15)))
        );

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 447, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        buttonGroup1.add(jRadioButton16);
        jRadioButton16.setText("AMEX");

        buttonGroup1.add(jRadioButton17);
        jRadioButton17.setText("SPX");

        buttonGroup1.add(jRadioButton18);
        jRadioButton18.setText("OEX");

        buttonGroup1.add(jRadioButton19);
        jRadioButton19.setText("NYA");

        buttonGroup1.add(jRadioButton20);
        jRadioButton20.setText("PTPX");

        buttonGroup1.add(jRadioButton21);
        jRadioButton21.setText("SML");

        buttonGroup1.add(jRadioButton22);
        jRadioButton22.setText("NDX");

        buttonGroup1.add(jRadioButton23);
        jRadioButton23.setText("INDU");

        buttonGroup1.add(jRadioButton24);
        jRadioButton24.setText("MID");

        jButton12.setBackground(new java.awt.Color(102, 102, 255));
        jButton12.setFont(new java.awt.Font("Arial Black", 1, 10)); // NOI18N
        jButton12.setForeground(new java.awt.Color(0, 0, 204));
        jButton12.setText("OK");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton16)
                    .addComponent(jRadioButton17)
                    .addComponent(jRadioButton18)
                    .addComponent(jRadioButton19)
                    .addComponent(jRadioButton20)
                    .addComponent(jRadioButton21)
                    .addComponent(jRadioButton22)
                    .addComponent(jRadioButton23)
                    .addComponent(jRadioButton24))
                .addContainerGap(10, Short.MAX_VALUE))
            .addComponent(jButton12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jRadioButton16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton24)
                .addGap(18, 18, 18)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(118, 118, 118))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Stationary Test", jPanel6);

        buttonGroup2.add(jRadioButton42);
        jRadioButton42.setText("MID");

        buttonGroup2.add(jRadioButton41);
        jRadioButton41.setText("INDU");

        buttonGroup2.add(jRadioButton40);
        jRadioButton40.setText("NDX");

        buttonGroup2.add(jRadioButton39);
        jRadioButton39.setText("SML");

        buttonGroup2.add(jRadioButton38);
        jRadioButton38.setText("PTPX");

        buttonGroup2.add(jRadioButton37);
        jRadioButton37.setText("NYA");

        buttonGroup2.add(jRadioButton36);
        jRadioButton36.setText("OEX");

        buttonGroup2.add(jRadioButton35);
        jRadioButton35.setText("SPX");

        jLabel2.setText("Index of my Choice");

        buttonGroup2.add(jRadioButton34);
        jRadioButton34.setText("AMEX");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton34)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton40)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton41)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton42)
                .addContainerGap())
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton42)
                    .addComponent(jRadioButton41)
                    .addComponent(jRadioButton40)
                    .addComponent(jRadioButton39)
                    .addComponent(jRadioButton38)
                    .addComponent(jRadioButton37)
                    .addComponent(jRadioButton36)
                    .addComponent(jRadioButton35)
                    .addComponent(jRadioButton34)
                    .addComponent(jLabel2)))
        );

        buttonGroup1.add(jRadioButton25);
        jRadioButton25.setText("AMEX");

        buttonGroup1.add(jRadioButton26);
        jRadioButton26.setText("SPX");

        buttonGroup1.add(jRadioButton27);
        jRadioButton27.setText("OEX");

        buttonGroup1.add(jRadioButton28);
        jRadioButton28.setText("NYA");

        buttonGroup1.add(jRadioButton29);
        jRadioButton29.setText("PTPX");

        buttonGroup1.add(jRadioButton30);
        jRadioButton30.setText("SML");

        buttonGroup1.add(jRadioButton31);
        jRadioButton31.setText("NDX");

        buttonGroup1.add(jRadioButton32);
        jRadioButton32.setText("INDU");

        buttonGroup1.add(jRadioButton33);
        jRadioButton33.setText("MID");

        jButton13.setBackground(new java.awt.Color(51, 51, 255));
        jButton13.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jButton13.setForeground(new java.awt.Color(51, 0, 204));
        jButton13.setText("OK");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRadioButton25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButton26)
                    .addComponent(jRadioButton27)
                    .addComponent(jRadioButton28)
                    .addComponent(jRadioButton29)
                    .addComponent(jRadioButton30)
                    .addComponent(jRadioButton33)
                    .addComponent(jRadioButton31)
                    .addComponent(jRadioButton32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(102, 102, 102))
        );

        jScrollPane5.setViewportView(jLabel3);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane5)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 74, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Spread", jPanel12);

        jPanel18.setPreferredSize(new java.awt.Dimension(631, 525));

        jLabel8.setText("HighestCoIntegrated pairs");

        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jScrollPane7.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(78, 78, 78))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel8)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel19Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 104, Short.MAX_VALUE)
            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel19Layout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(26, Short.MAX_VALUE)))
        );

        buttonGroup1.add(jRadioButton43);
        jRadioButton43.setText("AMEX");

        buttonGroup1.add(jRadioButton44);
        jRadioButton44.setText("SPX");

        buttonGroup1.add(jRadioButton45);
        jRadioButton45.setText("OEX");

        buttonGroup1.add(jRadioButton46);
        jRadioButton46.setText("NYA");

        buttonGroup1.add(jRadioButton47);
        jRadioButton47.setText("PTPX");

        buttonGroup1.add(jRadioButton48);
        jRadioButton48.setText("SML");

        buttonGroup1.add(jRadioButton49);
        jRadioButton49.setText("NDX");

        buttonGroup1.add(jRadioButton50);
        jRadioButton50.setText("INDU");

        buttonGroup1.add(jRadioButton51);
        jRadioButton51.setText("MID");

        jButton14.setBackground(new java.awt.Color(102, 102, 255));
        jButton14.setFont(new java.awt.Font("Arial Black", 1, 10)); // NOI18N
        jButton14.setForeground(new java.awt.Color(0, 0, 204));
        jButton14.setText("OK");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton43)
                    .addComponent(jRadioButton44)
                    .addComponent(jRadioButton45)
                    .addComponent(jRadioButton46)
                    .addComponent(jRadioButton47)
                    .addComponent(jRadioButton48)
                    .addComponent(jRadioButton49)
                    .addComponent(jRadioButton50)
                    .addComponent(jRadioButton51))
                .addContainerGap(10, Short.MAX_VALUE))
            .addComponent(jButton14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jRadioButton43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton44)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton45)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton46)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton47)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton49)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton50)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton51)
                .addGap(18, 18, 18)
                .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addComponent(jPanel22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 29, Short.MAX_VALUE))
        );

        jTextArea5.setColumns(20);
        jTextArea5.setRows(5);
        jScrollPane8.setViewportView(jTextArea5);

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("CoIntegration", jPanel18);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("AMEX");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("SPX");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("OEX");

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("NYA");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton5);
        jRadioButton5.setText("PTPX");

        buttonGroup1.add(jRadioButton6);
        jRadioButton6.setText("SNL");

        buttonGroup1.add(jRadioButton7);
        jRadioButton7.setText("NDX");

        buttonGroup1.add(jRadioButton8);
        jRadioButton8.setText("INDU");

        buttonGroup1.add(jRadioButton9);
        jRadioButton9.setText("MID");

        jButton9.setBackground(new java.awt.Color(102, 102, 255));
        jButton9.setFont(new java.awt.Font("Arial Black", 1, 10)); // NOI18N
        jButton9.setForeground(new java.awt.Color(0, 0, 204));
        jButton9.setText("OK");
        jButton9.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 153, 102)));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5)
                    .addComponent(jRadioButton6)
                    .addComponent(jRadioButton7)
                    .addComponent(jRadioButton8)
                    .addComponent(jRadioButton9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jRadioButton1)
                .addGap(4, 4, 4)
                .addComponent(jRadioButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton4)
                .addGap(6, 6, 6)
                .addComponent(jRadioButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(62, Short.MAX_VALUE))
        );

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        buttonGroup2.add(jRadioButton10);
        jRadioButton10.setText("Lag 1");

        buttonGroup2.add(jRadioButton11);
        jRadioButton11.setText("Lag 2");

        buttonGroup2.add(jRadioButton12);
        jRadioButton12.setText("Lag 3");
        jRadioButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(jRadioButton10)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton11)
                .addGap(18, 18, 18)
                .addComponent(jRadioButton12)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton11)
                    .addComponent(jRadioButton12)
                    .addComponent(jRadioButton10))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 33, Short.MAX_VALUE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Predicted Price", jPanel7);

        jScrollPane9.setViewportView(jLabel9);

        jButton15.setText("GARCH ");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .addComponent(jButton15)
                .addGap(259, 259, 259))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane9)
                    .addComponent(jPanel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel13Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Volatility", jPanel13);

        jLabel10.setBackground(new java.awt.Color(204, 204, 255));
        jScrollPane10.setViewportView(jLabel10);

        jButton16.setText("Profit Curve");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Trade Curve");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 601, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(jButton16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton17)
                .addGap(150, 150, 150))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton16)
                    .addComponent(jButton17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Scenarios", jPanel14);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 626, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
       
        try {
                num=0; 
        BufferedReader brAMEX=new BufferedReader(new FileReader(AMEXcsv));
            while ((line = brAMEX.readLine()) != null) {
            String [] price=line.split(",");

           for(String cladj:price)
    {
            numbers[num] = cladj;
    }
num++;
    }          

priceint = new double[num];

for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}   
for (int i =0; i<1500; ) {
priceintAMEX[i] =priceint[1500-i]; 
i++;
}
      
    } catch(ArrayIndexOutOfBoundsException ep){
        ep.printStackTrace();}
            catch (FileNotFoundException ep) {
            ep.printStackTrace();
    } catch (IOException ep) {
            ep.printStackTrace();
    } finally {
            if (brAMEX != null) {
                    try {
                            brAMEX.close();
                    } catch (IOException ep) {
                            ep.printStackTrace();
                    }
            }
    }
        
        try {
num=0; 
BufferedReader brSPX=new BufferedReader(new FileReader(SPXcsv));
while ((line = brSPX.readLine()) != null) {
 String [] price=line.split(",");
               
             for(String cladj:price)
	{
		numbers[num] = cladj;
	}
num++;
        }          
                
priceint = new double[num];

for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}     
for (int i =0; i<1500;) {
priceintSPX[i] =priceint[1500-i]; 
i++;
}
       } catch(ArrayIndexOutOfBoundsException ep){
            ep.printStackTrace();}
                catch (FileNotFoundException ep) {
		ep.printStackTrace();
	} catch (IOException ep) {
		ep.printStackTrace();
	} finally {
		if (brSPX != null) {
			try {
				brSPX.close();
			} catch (IOException ep) {
				ep.printStackTrace();
			}
		}
	}  

try {
num=0; 
BufferedReader brOEX=new BufferedReader(new FileReader(OEXcsv));
while ((line = brOEX.readLine()) != null) {
 String [] price=line.split(",");
     
               for(String cladj:price)
	{
		numbers[num] = cladj;
	}
num++;
        }          
                
priceint = new double[num];

for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}     
for (int i =0; i<1500;) {
priceintOEX[i] =priceint[1500-i]; 
i++;
}
 	} catch(ArrayIndexOutOfBoundsException ep){
            ep.printStackTrace();}
                catch (FileNotFoundException ep) {
		ep.printStackTrace();
	} catch (IOException ep) {
		ep.printStackTrace();
	} finally {
		if (brOEX != null) {
			try {
				brOEX.close();
			} catch (IOException ep) {
				ep.printStackTrace();
			}
		}
	}            
try {
num=0; 
BufferedReader brNYA=new BufferedReader(new FileReader(NYAcsv));
while ((line = brNYA.readLine()) != null) {
 String [] price=line.split(",");
               for(String cladj:price)
	{
		numbers[num] = cladj;
	}
num++;
        }          
priceint = new double[num];
for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}     
for (int i =0; i<1500;) {
priceintNYA[i] =priceint[1500-i]; 
i++;
}
 	} catch(ArrayIndexOutOfBoundsException ep){
            ep.printStackTrace();}
                catch (FileNotFoundException ep) {
		ep.printStackTrace();
	} catch (IOException ep) {
		ep.printStackTrace();
	} finally {
		if (brNYA != null) {
			try {
				brNYA.close();
			} catch (IOException ep) {
				ep.printStackTrace();
			}
		}
	}  
try {
num=0; 

        BufferedReader brPTPX=new BufferedReader(new FileReader(PTPXcsv));
while ((line = brPTPX.readLine()) != null) {
 String [] price=line.split(",");
               
           
               for(String cladj:price)
	{
		numbers[num] = cladj;
	}
num++;
        }          
                
priceint = new double[num];
 
for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}     
for (int i =0; i<1500;) {
priceintPTPX[i] =priceint[1500-i]; 
i++;
}
           
 	} catch(ArrayIndexOutOfBoundsException ep){
            ep.printStackTrace();}
                catch (FileNotFoundException ep) {
		ep.printStackTrace();
	} catch (IOException ep) {
		ep.printStackTrace();
	} finally {
		if (brPTPX != null) {
			try {
				brPTPX.close();
			} catch (IOException ep) {
				ep.printStackTrace();
			}
		}
	}  
try {
num=0; 

        BufferedReader brSML=new BufferedReader(new FileReader(SMLcsv));
while ((line = brSML.readLine()) != null) {
 String [] price=line.split(",");
               for(String cladj:price)
	{
		numbers[num] = cladj;
	}
num++;
        }          
                
priceint = new double[num];

for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}     
for (int i =0; i<1500;) {
priceintSML[i] =priceint[1500-i]; 
i++;
}
           
 	} catch(ArrayIndexOutOfBoundsException ep){
            ep.printStackTrace();}
                catch (FileNotFoundException ep) {
		ep.printStackTrace();
	} catch (IOException ep) {
		ep.printStackTrace();
	} finally {
		if (brSML != null) {
			try {
				brSML.close();
			} catch (IOException ep) {
				ep.printStackTrace();
			}
		}
	}  
try {
num=0; 
BufferedReader brINDU=new BufferedReader(new FileReader(INDUcsv));
while ((line = brINDU.readLine()) != null) {
 String [] price=line.split(",");
               for(String cladj:price)
	{
		numbers[num] = cladj;
	}
num++;
        }          
priceint = new double[num];
 
for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}     
for (int i =0; i<1500;) {
priceintINDU[i] =priceint[1500-i]; 
i++;
}
           
 	} catch(ArrayIndexOutOfBoundsException ep){
            ep.printStackTrace();}
                catch (FileNotFoundException ep) {
		ep.printStackTrace();
	} catch (IOException ep) {
		ep.printStackTrace();
	} finally {
		if (brINDU != null) {
			try {
				brINDU.close();
			} catch (IOException ep) {
				ep.printStackTrace();
			}
		}
	}
try {
num=0; 
BufferedReader brNDX=new BufferedReader(new FileReader(NDXcsv));
while ((line = brNDX.readLine()) != null) {
 String [] price=line.split(",");
               for(String cladj:price)
	{
		numbers[num] = cladj;
	}
num++;
        }          
                
priceint = new double[num];

for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}     
for (int i =0; i<1500;) {
priceintNDX[i] =priceint[1500-i]; 
i++;
}
 	} catch(ArrayIndexOutOfBoundsException ep){
            ep.printStackTrace();}
                catch (FileNotFoundException ep) {
		ep.printStackTrace();
	} catch (IOException ep) {
		ep.printStackTrace();
	} finally {
		if (brNDX != null) {
			try {
				brNDX.close();
			} catch (IOException ep) {
				ep.printStackTrace();
			}
		}
	}
try {
num=0; 
BufferedReader brMID=new BufferedReader(new FileReader(MIDcsv));
while ((line = brMID.readLine()) != null) {
 String [] price=line.split(",");
               
             
               for(String cladj:price)
	{
		numbers[num] = cladj;
	}
num++;
        }          
                
priceint = new double[num];
 
for (int i = 1; i < priceint.length; i++) {
priceint[i] = Double.parseDouble(numbers[i]);
}     
for (int i =0; i<1500;) {
priceintMID[i] =priceint[1500-i]; 
i++;
}
           
 	} catch(ArrayIndexOutOfBoundsException ep){
            ep.printStackTrace();}
                catch (FileNotFoundException ep) {
		ep.printStackTrace();
	} catch (IOException ep) {
		ep.printStackTrace();
	} finally {
		if (brMID != null) {
			try {
				brMID.close();
			} catch (IOException ep) {
				ep.printStackTrace();
			}
		}
	}
        
        textArea1.append("AMEX"+":"+String.valueOf( priceintAMEX[0])+"\n"
               + "INDU" +":"+String.valueOf(priceintINDU[0])+"\n"
               + "NDX" +":"+String.valueOf(priceintNDX[0])+"\n"
               + "PTPC" +":"+String.valueOf( priceintPTPX[0])+"\n"
                + "NYA"+":"+String.valueOf( priceintNYA[0])+"\n"
                + "OEX"+":"+String.valueOf( priceintOEX[0])+"\n"
                + "SML"+":"+String.valueOf( priceintSML[0])+"\n"
                + "SPX"+":"+String.valueOf( priceintSPX[0])+"\n"
                + "MID"+":"+String.valueOf( priceintMID[0]));
        
                textArea2.append("AMEX"+":"+String.valueOf( priceintAMEX[1499])+"\n"
               + "INDU" +":"+String.valueOf(priceintINDU[1499])+"\n"
               + "NDX" +":"+String.valueOf(priceintNDX[1499])+"\n"
               + "PTPC" +":"+String.valueOf( priceintPTPX[1499])+"\n"
                + "NYA"+":"+String.valueOf( priceintNYA[1499])+"\n"
                + "OEX"+":"+String.valueOf( priceintOEX[1499])+"\n"
                + "SML"+":"+String.valueOf( priceintSML[1499])+"\n"
                + "SPX"+":"+String.valueOf( priceintSPX[1499])+"\n"
                + "MID"+":"+String.valueOf( priceintMID[1499]));
    
                JOptionPane.showMessageDialog(this,"Price Uploaded","Now Click Price Chart Tab",
                   JOptionPane.INFORMATION_MESSAGE);
                
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
           
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("AMEX", priceintAMEX);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(AMEX)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }

    }                                        

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {                                         
      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("SPX", priceintSPX);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(SPX)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                        

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                         
          try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("OEX", priceintOEX);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(OEX)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                        

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {                                         
          try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("NYA", priceintNYA);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(NYA)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                        

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {                                         
          try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("PTPX", priceintPTPX);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(PTPX)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                        

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {                                         
          try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("SML", priceintSML);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(SML)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                        

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {                                         
          try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("NDX", priceintNDX);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(NDX)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                        

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {                                          
          try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("INDU", priceintINDU);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(INDU)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                         

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {                                          
          try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.clear();
      code.addDoubleArray("MID", priceintMID);
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(MID)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel5.setIcon(code.getPlot(file));
      code.clear();
            } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                         

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {                                         
 if(jRadioButton1.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("AMEX", priceintAMEX);
code.addRCode("fitamex <- arima(AMEX, order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("foreamex <- predict(fitamex, n.ahead=3)");
code.addRCode("prediction_amex<-foreamex$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction_amex");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted AMEX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("AMEX", priceintAMEX);
code.addRCode("fitamex <- arima(AMEX, order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("foreamex <- predict(fitamex, n.ahead=3)");
code.addRCode("prediction_amex<-foreamex$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction_amex");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted AMEX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("AMEX", priceintAMEX);
code.addRCode("fitamex <- arima(AMEX, order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("foreamex <- predict(fitamex, n.ahead=3)");
code.addRCode("prediction_amex<-foreamex$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction_amex");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted AMEX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }
 //
 if(jRadioButton2.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("SPX", priceintSPX);
code.addRCode("fit <- arima(SPX,order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted SPX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("SPX", priceintSPX);
code.addRCode("fit <- arima(SPX,order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted SPX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("SPX", priceintSPX);
code.addRCode("fit <- arima(SPX,order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted SPX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }

 //
  if(jRadioButton3.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("OEX", priceintOEX);
code.addRCode("fit <- arima(OEX,order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted OEX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("OEX", priceintOEX);
code.addRCode("fit <- arima(OEX,order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted OEX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("OEX", priceintOEX);
code.addRCode("fit <- arima(OEX,order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted OEX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }

 //
   if(jRadioButton4.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("NYA", priceintNYA);
code.addRCode("fit <- arima(NYA,order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted NYA price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("NYA", priceintNYA);
code.addRCode("fit <- arima(SPX,order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted NYA price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("NYA", priceintNYA);
code.addRCode("fit <- arima(SPX,order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted NYA price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }

 //
    if(jRadioButton5.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("PTPX", priceintPTPX);
code.addRCode("fit <- arima(PTPX,order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted PTPX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("PTPX", priceintPTPX);
code.addRCode("fit <- arima(PTPX,order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted PTPX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("PTPX", priceintPTPX);
code.addRCode("fit <- arima(SPX,order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted PTPX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }

 //
     if(jRadioButton6.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("SML", priceintSML);
code.addRCode("fit <- arima(SML,order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted SML price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("SML", priceintSML);
code.addRCode("fit <- arima(SML,order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted SML price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("SML", priceintSML);
code.addRCode("fit <- arima(SML,order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted SML price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }

 //
      if(jRadioButton7.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("NDX", priceintNDX);
code.addRCode("fit <- arima(NDX,order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted NDX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("NDX", priceintNDX);
code.addRCode("fit <- arima(NDX,order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted NDX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("NDX", priceintNDX);
code.addRCode("fit <- arima(NDX,order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted NDX price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }

 //
       if(jRadioButton8.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("INDU", priceintINDU);
code.addRCode("fit <- arima(INDU,order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted INDU price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();

code.addDoubleArray("INDU", priceintINDU);
code.addRCode("fit <- arima(INDU,order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted INDU price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("INDU", priceintINDU);
code.addRCode("fit <- arima(INDU,order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted INDU price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }
       //
        if(jRadioButton9.isSelected()){
            if(jRadioButton10.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
    
      RCode code = new RCode();

code.addDoubleArray("MID", priceintMID);
code.addRCode("fit <- arima(MID,order=c(1,0,0), list(order=c(2,1,0), period=1))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted MID price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton11.isSelected()){
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("MID", priceintMID);
code.addRCode("fit <- arima(MID,order=c(1,0,0), list(order=c(2,1,0), period=2))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted MID price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton12.isSelected()){
                  try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      caller.setGraphicsTheme(new BlackTheme());
      RCode code = new RCode();

code.addDoubleArray("MID", priceintMID);
code.addRCode("fit <- arima(MID,order=c(1,0,0), list(order=c(2,1,0), period=3))");
code.addRCode("fore <- predict(fit, n.ahead=3)");
code.addRCode("prediction<-fore$pred[1:3]");
caller.setRCode(code);
caller.runAndReturnResult("prediction");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea1.append("\t"+"\t"+"Predicted MID price"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n"+
        String.valueOf(str[2])+"\n"+String.valueOf(str[3]));


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }

 //

 //
    }                                        

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {                                          
    ///
        if(jRadioButton16.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("AMEX", priceintAMEX);
code.addRCode("adfResults <- adf.test((AMEX),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of AMEX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

 } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
try {
    RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("AMEX", priceintAMEX);
code.addRCode("adfResults <- adf.test((AMEX),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of AMEX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

} catch (Exception e) {
      System.out.println(e.toString());
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("AMEX", priceintAMEX);
code.addRCode("adfResults <- adf.test((AMEX),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of AMEX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
    
}
        }
        
    
if(jRadioButton17.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("SPX", priceintSPX);
code.addRCode("adfResults <- adf.test((SPX),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of SPX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("AMEX", priceintSPX);
code.addRCode("adfResults <- adf.test((SPX),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of SPX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("SPX", priceintSPX);
code.addRCode("adfResults <- adf.test((SPX),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of SPX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");
      } catch (Exception e) {
      System.out.println(e.toString());
    }
}
}
}
//
if(jRadioButton18.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("OEX", priceintOEX);
code.addRCode("adfResults <- adf.test((OEX),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of OEX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("OEX", priceintOEX);
code.addRCode("adfResults <- adf.test((OEX),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of OEX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("OEX", priceintOEX);
code.addRCode("adfResults <- adf.test((OEX),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of OEX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");



      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
}
}
//
if(jRadioButton19.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("NYA", priceintNYA);
code.addRCode("adfResults <- adf.test((NYA),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of NYA time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("NYA", priceintNYA);
code.addRCode("adfResults <- adf.test((NYA),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of NYA time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("NYA", priceintNYA);
code.addRCode("adfResults <- adf.test((NYA),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of NYA time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");



      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
}
}
//
if(jRadioButton20.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("PTPX", priceintPTPX);
code.addRCode("adfResults <- adf.test((PTPX),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of PTPX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("PTPX", priceintPTPX);
code.addRCode("adfResults <- adf.test((PTPX),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of PTPX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("PTPX", priceintPTPX);
code.addRCode("adfResults <- adf.test((PTPX),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of PTPX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");



      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
}
}
//
if(jRadioButton21.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("SML", priceintSML);
code.addRCode("adfResults <- adf.test((SML),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of SML time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("SML", priceintSML);
code.addRCode("adfResults <- adf.test((SML),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of SML time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("SML", priceintSML);
code.addRCode("adfResults <- adf.test((SML),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of SML time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");



      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
}
}
//
if(jRadioButton22.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("NDX", priceintNDX);
code.addRCode("adfResults <- adf.test((NDX),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of NDX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("NDX", priceintNDX);
code.addRCode("adfResults <- adf.test((NDX),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of NDX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("NDX", priceintNDX);
code.addRCode("adfResults <- adf.test((NDX),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of NDX time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");



      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
}
}
//
if(jRadioButton23.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("INDU", priceintINDU);
code.addRCode("adfResults <- adf.test((INDU),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of INDU time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("INDU", priceintINDU);
code.addRCode("adfResults <- adf.test((INDU),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of INDU time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("INDU", priceintINDU);
code.addRCode("adfResults <- adf.test((INDU),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of INDU time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");



      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
}
}
//
if(jRadioButton24.isSelected()){
            if(jRadioButton13.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("MID", priceintMID);
code.addRCode("adfResults <- adf.test((MID),k=0)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of MID time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");


      } catch (Exception e) {
      System.out.println(e.toString());
    }
}

if(jRadioButton14.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("MID", priceintMID);
code.addRCode("adfResults <- adf.test((MID),k=1)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of MID time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    
}
}
else
{
    if(jRadioButton15.isSelected()){
                      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");

code.addDoubleArray("MID", priceintMID);
code.addRCode("adfResults <- adf.test((MID),k=2)");
code.addRCode("value <- adfResults[0:2]");
caller.setRCode(code);
caller.runAndReturnResult("value");
String stramex=caller.getParser().getXMLFileAsString();
String []strsplit=stramex.split(" ");
String []str=strsplit[3].split("\n");
jTextArea2.append("\t"+"Stationary test of MID time series"+"\n"+"\n"+"\n"+String.valueOf(str[1])+"\n");



      } catch (Exception e) {
      System.out.println(e.toString());
      }   
}
}
}
//

    }                                         

    private void jRadioButton12ActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {                                          
    //String strchoice=jTextField1.getText();
          
       if(jRadioButton34.isSelected()){
      
           if(jRadioButton25.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton26.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*SPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton27.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*OEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton28.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*NYA");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton29.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*PTPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton30.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*SML");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*NDX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*INDU");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*MID");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///
           
        if(jRadioButton35.isSelected()){
      
           if(jRadioButton26.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton25.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton27.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton28.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton29.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton30.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///         
    
           if(jRadioButton36.isSelected()){
      
           if(jRadioButton27.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton26.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(OEX) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- OEX - beta*SPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton25.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(OEX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- OEX - beta*AMEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton28.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(OEX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- OEX - beta*NYA");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton29.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(OEX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- OEX - beta*PTPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton30.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(OEX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- OEX - beta*SML");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(OEX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- OEX - beta*NDX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(OEX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- OEX - beta*INDU");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(OEX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- OEX - beta*MID");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///
    
           if(jRadioButton37.isSelected()){
      
           if(jRadioButton28.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton26.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(NYA) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NYA - beta*SPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton27.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(NYA) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NYA - beta*OEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton25.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(NYA) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NYA - beta*AMEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton29.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(NYA) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NYA - beta*PTPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton30.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(NYA) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NYA - beta*SML");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(NYA) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NYA - beta*NDX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(NYA) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NYA - beta*INDU");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(NYA) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NYA - beta*MID");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///
              if(jRadioButton38.isSelected()){
      
           if(jRadioButton29.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton26.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(PTPX) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- PTPX - beta*SPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton27.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(PTPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- PTPX - beta*OEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton28.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(PTPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- PTPX - beta*NYA");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton25.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(PTPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- PTPX - beta*AMEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton30.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(PTPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- PTPX - beta*SML");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(PTPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- PTPX - beta*NDX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(PTPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- PTPX - beta*INDU");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(PTPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- PTPX - beta*MID");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///
                     if(jRadioButton39.isSelected()){
      
           if(jRadioButton30.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton26.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*SPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton27.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*OEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton28.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*NYA");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton29.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*PTPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton25.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*AMEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*NDX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*INDU");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*MID");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///
       
             if(jRadioButton40.isSelected()){
      
           if(jRadioButton31.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton26.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(NDX) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NDX - beta*SPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton27.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(NDX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NDX - beta*OEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton28.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(NDX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NDX - beta*NYA");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton29.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(NDX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NDX - beta*PTPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton30.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(NDX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NDX - beta*SML");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(NDX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NDX - beta*AMEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(NDX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NDX - beta*INDU");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(NDX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- NDX - beta*MID");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///               
                    if(jRadioButton41.isSelected()){
      
           if(jRadioButton32.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton26.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(INDU) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- INDU - beta*SPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton27.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(INDU) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- INDU - beta*OEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton28.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(INDU) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- INDU - beta*NYA");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton29.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(INDU) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- INDU - beta*PTPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton30.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(INDU) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- INDU - beta*SML");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(INDU) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- INDU - beta*NDX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(INDU) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- INDU - beta*AMEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(INDU) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- INDU - beta*MID");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///
                           if(jRadioButton42.isSelected()){
      
           if(jRadioButton33.isSelected()){
           JOptionPane.showMessageDialog(this,"Same index selected for Pairs","Warning",
                   JOptionPane.WARNING_MESSAGE);
            }
           
           //       
       if(jRadioButton26.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("MID", priceintMID);
      code.addDoubleArray("SPX", priceintSPX);
      code.addRCode("regression <- lm(Delt(MID) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- MID - beta*SPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //    
       if(jRadioButton27.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("MID", priceintMID);
      code.addDoubleArray("OEX", priceintOEX);
      code.addRCode("regression <- lm(Delt(MID) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- MID - beta*OEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
       //
              if(jRadioButton28.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("MID", priceintMID);
      code.addDoubleArray("NYA", priceintNYA);
      code.addRCode("regression <- lm(Delt(MID) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- MID - beta*NYA");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
              //
                 if(jRadioButton29.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("MID", priceintMID);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addRCode("regression <- lm(Delt(MID) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- MID - beta*PTPX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                 //
      if(jRadioButton30.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("MID", priceintMID);
      code.addDoubleArray("SML", priceintSML);
      code.addRCode("regression <- lm(Delt(MID) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- MID - beta*SML");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
      //
            if(jRadioButton31.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("MID", priceintMID);
      code.addDoubleArray("NDX", priceintNDX);
      code.addRCode("regression <- lm(Delt(MID) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- MID - beta*NDX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
            //
                if(jRadioButton32.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("MID", priceintMID);
      code.addDoubleArray("INDU", priceintINDU);
      code.addRCode("regression <- lm(Delt(MID) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- MID - beta*INDU");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }
                //
                else{
                     if(jRadioButton33.isSelected()){

               try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(MID) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- MID - beta*AMEX");
      File file = code.startPlot();
      System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.ts(spread)");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel3.setIcon(code.getPlot(file));
      code.clear();
   
      } catch (Exception e) {
      System.out.println(e.toString());
    }
               
            }}
                           }

      ///
    }                                         

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {                                          
    
        if(jRadioButton43.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*SPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*SPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with AMEX time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(SPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*SPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*SPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(AMEX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- AMEX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.setText(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        }
///        
        
        if(jRadioButton44.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with SPX time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.setText(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        }
        
        ///
        
        if(jRadioButton45.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("OEX", priceintSPX);
      code.addDoubleArray("SPX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with OEX time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("OEX", priceintSPX);
      code.addDoubleArray("SPX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.append(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        
        }
        ///        
        
        if(jRadioButton46.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("NYA", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("SPX", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with NYA time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("NYA", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("SPX", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.setText(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        
        }
        ///        
          
        if(jRadioButton47.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("PTPX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("SPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with PTPX time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("PTPX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("SPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.setText(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        
        }
        ///      
        
                
        if(jRadioButton48.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SML", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SPX", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with SML time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SML", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SPX", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.setText(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        
        }
        ///
        
        if(jRadioButton49.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("NDX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("SPX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with NDX time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("NDX", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("SPX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.append(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        
        }
        ///      
             
        if(jRadioButton50.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("INDU", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("SPX", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with INDU time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("INDU", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("SPX", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.setText(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        
        }
        ///
          
        if(jRadioButton51.isSelected()){
        try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("MID", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("SPX", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      caller.setRCode(code);
     caller.runAndReturnResult("sum");
     String strsml=caller.getParser().getXMLFileAsString();
     jTextArea5.setText("\t"+"CoIntegration test with MID time series"+"\n"+"\n"+"\n"+strsml+"\n");

      } catch (Exception e) {
      System.out.println(e.toString());
    } 
//
            try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("MID", priceintSPX);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("SPX", priceintMID);
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*AMEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum1<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(OEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*OEX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum2<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NYA))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NYA");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum3<-summary(DFcointegration)@teststat[1]");
     
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(PTPX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*PTPX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum4<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(SML))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*SML");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum5<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(NDX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*NDX");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum6<-summary(DFcointegration)@teststat[1]");
      
       code.addRCode("regression <- lm(Delt(SPX) ~ Delt(INDU))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*INDU");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum7<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("regression <- lm(Delt(SPX) ~ Delt(MID))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SPX - beta*MID");
      code.addRCode("DFcointegration <- ur.df(y=spread, lags=3, type='trend')");
      code.addRCode("sum8<-summary(DFcointegration)@teststat[1]");
      
      code.addRCode("sum<-c(sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8)");
      code.addRCode("minsum<-min(sum)");
      caller.setRCode(code);
     caller.runAndReturnResult("minsum");
     String strsml=caller.getParser().getXMLFileAsString();

   jTextArea4.setText(strsml);

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        }
        
        ///      
       
    }                                         

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {                                          
try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("OEX", priceintOEX);
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addDoubleArray("SPX", priceintSPX);
      code.addDoubleArray("NYA", priceintNYA);
      code.addDoubleArray("PTPX", priceintPTPX);
      code.addDoubleArray("NDX", priceintNDX);
      code.addDoubleArray("INDU", priceintINDU);
      code.addDoubleArray("MID", priceintMID);
     code.addRCode("fit1=garch(SML, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last1 = tail( fitted(fit1)[,1] ,1)");
     code.addRCode("r.last1 =  tail(SML,1 )");
     code.addRCode("V1<-sqrt(sum( coef(fit1) * c(1,  r.last1^2, h.last1^2) ))");
    
     code.addRCode("fit2=garch(AMEX, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last2 = tail( fitted(fit2)[,1] ,1)");
     code.addRCode("r.last2 =  tail(AMEX,1 )");
     code.addRCode("V2<-sqrt(sum( coef(fit2) * c(1,  r.last2^2, h.last2^2) ))");
     
     code.addRCode("fit3=garch(SPX, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last3 = tail( fitted(fit3)[,1] ,1)");
     code.addRCode("r.last3 =  tail(SPX,1 )");
     code.addRCode("V3<-sqrt(sum( coef(fit3) * c(1,  r.last3^2, h.last3^2) ))");
     
     code.addRCode("fit4=garch(NYA, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last4 = tail( fitted(fit4)[,1] ,1)");
     code.addRCode("r.last4 =  tail(NYA,1 )");
     code.addRCode("V4<-sqrt(sum( coef(fit4) * c(1,  r.last4^2, h.last4^2) ))");
     
     code.addRCode("fit5=garch(OEX, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last5 = tail( fitted(fit5)[,1] ,1)");
     code.addRCode("r.last5 =  tail(OEX,1 )");
     code.addRCode("V5<-sqrt(sum( coef(fit5) * c(1,  r.last5^2, h.last5^2) ))");
     
     code.addRCode("fit6=garch(PTPX, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last6 = tail( fitted(fit6)[,1] ,1)");
     code.addRCode("r.last6 =  tail(PTPX,1 )");
     code.addRCode("V6<-sqrt(sum( coef(fit6) * c(1,  r.last6^2, h.last6^2) ))");
     
     code.addRCode("fit7=garch(NDX, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last7 = tail( fitted(fit7)[,1] ,1)");
     code.addRCode("r.last7 =  tail(NDX,1 )");
     code.addRCode("V7<-sqrt(sum( coef(fit7) * c(1,  r.last7^2, h.last7^2) ))");
     
     code.addRCode("fit8=garch(INDU, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last8 = tail( fitted(fit8)[,1] ,1)");
     code.addRCode("r.last8 =  tail(INDU,1 )");
     code.addRCode("V8<-sqrt(sum( coef(fit8) * c(1,  r.last8^2, h.last8^2) ))");
    
     code.addRCode("fit9=garch(MID, order = c(1, 1), control = garch.control(trace = F))");
     code.addRCode("h.last9 = tail( fitted(fit9)[,1] ,1)");
     code.addRCode("r.last9 =  tail(MID,1 )");
     code.addRCode("V9<-sqrt(sum( coef(fit9) * c(1,  r.last9^2, h.last9^2) ))");
     
     code.addRCode("predicted_volatility<-c(V1,V2,V3,V4,V5,V6,V7,V8,V9)");
     File file = code.startPlot();
     System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot(predicted_volatility,xlab='1:AMEX,2:SPX,3:OEX,4:NYA,5:PTPX,6:SML,7:NDX,8:INDU,9:MID')");
     
     code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel9.setIcon(code.getPlot(file));
      code.clear();
      } catch (Exception e) {
      System.out.println(e.toString());
    }
    }                                         

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {                                          
      try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*AMEX");
      code.addRCode("v<-rep(NA,250)");
      code.addRCode(" for (i in 1251:1500) {\n" +
"  fit<-garch(spread[1:i], order = c(1, 1), control = garch.control(trace = F))\n" +
"  h.last = tail( fitted(fit)[,1] ,1)\n" +
"  r.last = tail(spread[1:i], 1 )\n" +
"   v[i]<-sqrt(sum( coef(fit) * c(1,  r.last^2, h.last^2) ))\n" +
"}");
      
      code.addRCode("vol<-v[1251:1500]");
      code.addRCode("rsi <- RSI(vol,2)");
      code.addRCode("sigup <- ifelse(rsi < 10, 1, 0)"); 
      code.addRCode("sigdn <- ifelse(rsi > 90, -1, 0)"); 
      code.addRCode("sigup <- lag(sigup,1)"); 
      code.addRCode("sigdn <- lag(sigdn,1)"); 
      code.addRCode("sig <- sigup + sigdn"); 
      code.addRCode("ret <- ROC(vol)"); 
      code.addRCode("ret[1:2] <- 0"); 
      code.addRCode("sigup[1:2]<-0");
      code.addRCode("sigdn[1:2]<-0");
      code.addRCode("sig[1:2]<-0");
      code.addRCode("eq_up <- exp(cumsum(ret*sigup))");
      code.addRCode("eq_dn <- exp(cumsum(ret*sigdn))");//multiply -1 to reverse curve
      code.addRCode("eq_all <- exp(cumsum(ret*sig))");
      
            
     File file = code.startPlot();
     System.out.println("Plot will be saved to : " + file);
     code.addRCode("plot.zoo( cbind(eq_up, eq_dn),\n" +
"ylab=c(\"Long\",\"Short\"), col=c(\"green\",\"red\"),\n" +
"main=\"RSI(2) Strategy: GARCH FOR LAST 250 DAYS\" )");
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel10.setIcon(code.getPlot(file));
      code.clear();

      } catch (Exception e) {
      System.out.println(e.toString());
    }


    }                                         

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {                                          
              try {
      RCaller caller = new RCaller();
      caller.setRscriptExecutable("c:/Program Files/R/R-2.15.3/bin/i386/Rscript.exe");
      
      RCode code = new RCode();
      code.R_require("quantmod");
      code.R_require("PerformanceAnalytics");
      code.R_require("fUnitRoots");
      code.R_require("tseries");
      code.addDoubleArray("SML", priceintSML);
      code.addDoubleArray("AMEX", priceintAMEX);
      code.addRCode("regression <- lm(Delt(SML) ~ Delt(AMEX))");
      code.addRCode("beta <- coef(regression)[1]");
      code.addRCode("spread <- SML - beta*AMEX");
      code.addRCode("v<-rep(NA,1500)");
      code.addRCode(" for (i in 1:1500) {\n" +
"  fit<-garch(spread[1:i], order = c(1, 1), control = garch.control(trace = F))\n" +
"  h.last = tail( fitted(fit)[,1] ,1)\n" +
"  r.last = tail(spread[1:i], 1 )\n" +
"   v[i]<-sqrt(sum( coef(fit) * c(1,  r.last^2, h.last^2) ))\n" +
"}");
      
      code.addRCode("vol<-v[1:1500]");
      code.addRCode("rsi <- RSI(vol,2)");
      code.addRCode("sigup <- ifelse(rsi < 10, 'buy', 0)"); 
      code.addRCode("sigdn <- ifelse(rsi > 90, 'sell', 0)"); 
      code.addRCode("sigup <- lag(sigup,1)"); 
      code.addRCode("sigdn <- lag(sigdn,1)"); 
     // code.addRCode("sig <- sigup + sigdn"); 
//      code.addRCode("ret <- ROC(vol)"); 
//      code.addRCode("ret[1:2] <- 0"); 
   //   code.addRCode("sigup[1:2]<-0");
     // code.addRCode("sigdn[1:2]<-0");
      //code.addRCode("sig[1:2]<-0");
    //  code.addRCode("eq_up <- exp(cumsum(ret*sigup))");
      //code.addRCode("eq_dn <- exp(cumsum(ret*sigdn))");//multiply -1 to reverse curve
      //code.addRCode("eq_all <- exp(cumsum(ret*sig))");
      
      
      //code.addRCode("upbound <- rep(0.9,250)");
      //code.addRCode("lowbound <- rep(0.1,250)");
    
            
     File file = code.startPlot();
     System.out.println("Plot will be saved to : " + file);
      code.addRCode("plot.zoo( cbind(sigup, sigdn),\n" +
"ylab=c(\"Long\",\"Short\"), col=c(\"green\",\"red\"),\n" +
"main=\"RSI(2) Strategy: GARCH FOR LAST 250 DAYS\" )");
     
       code.endPlot();
      caller.setRCode(code);
      caller.runOnly();
      jLabel10.setIcon(code.getPlot(file));
      code.clear();

      } catch (Exception e) {
      System.out.println(e.toString());
    }
        
        
        
    }                                         

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TSA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TSA().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JList IndexList;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton10;
    private javax.swing.JRadioButton jRadioButton11;
    private javax.swing.JRadioButton jRadioButton12;
    private javax.swing.JRadioButton jRadioButton13;
    private javax.swing.JRadioButton jRadioButton14;
    private javax.swing.JRadioButton jRadioButton15;
    private javax.swing.JRadioButton jRadioButton16;
    private javax.swing.JRadioButton jRadioButton17;
    private javax.swing.JRadioButton jRadioButton18;
    private javax.swing.JRadioButton jRadioButton19;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton20;
    private javax.swing.JRadioButton jRadioButton21;
    private javax.swing.JRadioButton jRadioButton22;
    private javax.swing.JRadioButton jRadioButton23;
    private javax.swing.JRadioButton jRadioButton24;
    private javax.swing.JRadioButton jRadioButton25;
    private javax.swing.JRadioButton jRadioButton26;
    private javax.swing.JRadioButton jRadioButton27;
    private javax.swing.JRadioButton jRadioButton28;
    private javax.swing.JRadioButton jRadioButton29;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton30;
    private javax.swing.JRadioButton jRadioButton31;
    private javax.swing.JRadioButton jRadioButton32;
    private javax.swing.JRadioButton jRadioButton33;
    private javax.swing.JRadioButton jRadioButton34;
    private javax.swing.JRadioButton jRadioButton35;
    private javax.swing.JRadioButton jRadioButton36;
    private javax.swing.JRadioButton jRadioButton37;
    private javax.swing.JRadioButton jRadioButton38;
    private javax.swing.JRadioButton jRadioButton39;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton40;
    private javax.swing.JRadioButton jRadioButton41;
    private javax.swing.JRadioButton jRadioButton42;
    private javax.swing.JRadioButton jRadioButton43;
    private javax.swing.JRadioButton jRadioButton44;
    private javax.swing.JRadioButton jRadioButton45;
    private javax.swing.JRadioButton jRadioButton46;
    private javax.swing.JRadioButton jRadioButton47;
    private javax.swing.JRadioButton jRadioButton48;
    private javax.swing.JRadioButton jRadioButton49;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton50;
    private javax.swing.JRadioButton jRadioButton51;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private java.awt.TextArea textArea1;
    private java.awt.TextArea textArea2;
    // End of variables declaration                   
}
